import pandas as pd
import numpy as np
from MCForecastTools import MCSimulation
import itertools

def Monte_Sim_Ideal(data):
    """
    Finds portfolio weights for optimal portfolio based on Monte Carlo Simulation

    data: dataframe
    """
    #First we make a list of all possible weights for 5 stocks in increments of 0.1:
    from itertools import product
    s = [list(p/10 for p in prd) 
         for prd in product(range(11), repeat=5) if sum(prd) == 10]
    #We need dummy variables to store best simulations
    weight_ideal=[]
    ci_upper_ideal_cumulative_return = 0
    for i in range(len(s)):
        MC = MCSimulation(
        portfolio_data = data,
        weights = s[i],
        num_simulation = 500,
        num_trading_days = 252*30)
        MC.calc_cumulative_return()
        MC_table=MC.summarize_cumulative_return()
        if round(MC_table[9],2) > ci_upper_ideal_cumulative_return:
            weight_ideal = s[i]
            ci_upper_ideal_cumulative_return = round(MC_table[9],2)
            ci_lower_ideal_cumulative_return = round(MC_table[8],2)
    MC_ideal =MCSimulation(
        portfolio_data = data,
        weights = weight_ideal,
        num_simulation = 500,
        num_trading_days = 252*30)
    MC_ideal.calc_cumulative_return()
    print(MC_ideal.plot_simulation())
    print(f"The weights with the highest possible portfolio return are ${weight_ideal}, which with a probability of 95% will fall between ${ci_lower_thirty_cumulative_return} and ${ci_upper_thirty_cumulative_return}.")